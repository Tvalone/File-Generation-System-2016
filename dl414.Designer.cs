//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace File_Generation_System {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dl_records")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dl_records : global::System.Data.DataSet {
        
        private dl_recordDataTable tabledl_record;
        
        private name_or_addrDataTable tablename_or_addr;
        
        private abstractDataTable tableabstract;
        
        private commentDataTable tablecomment;
        
        private req_name_or_addrDataTable tablereq_name_or_addr;
        
        private actionDataTable tableaction;
        
        private global::System.Data.DataRelation relationdl_record_name_or_addr;
        
        private global::System.Data.DataRelation relationdl_record_abstract;
        
        private global::System.Data.DataRelation relationdl_record_comment;
        
        private global::System.Data.DataRelation relationdl_record_req_name_or_addr;
        
        private global::System.Data.DataRelation relationdl_record_action;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dl_records() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dl_records(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dl_record"] != null)) {
                    base.Tables.Add(new dl_recordDataTable(ds.Tables["dl_record"]));
                }
                if ((ds.Tables["name_or_addr"] != null)) {
                    base.Tables.Add(new name_or_addrDataTable(ds.Tables["name_or_addr"]));
                }
                if ((ds.Tables["abstract"] != null)) {
                    base.Tables.Add(new abstractDataTable(ds.Tables["abstract"]));
                }
                if ((ds.Tables["comment"] != null)) {
                    base.Tables.Add(new commentDataTable(ds.Tables["comment"]));
                }
                if ((ds.Tables["req_name_or_addr"] != null)) {
                    base.Tables.Add(new req_name_or_addrDataTable(ds.Tables["req_name_or_addr"]));
                }
                if ((ds.Tables["action"] != null)) {
                    base.Tables.Add(new actionDataTable(ds.Tables["action"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dl_recordDataTable dl_record {
            get {
                return this.tabledl_record;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public name_or_addrDataTable name_or_addr {
            get {
                return this.tablename_or_addr;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public abstractDataTable _abstract {
            get {
                return this.tableabstract;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public commentDataTable comment {
            get {
                return this.tablecomment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public req_name_or_addrDataTable req_name_or_addr {
            get {
                return this.tablereq_name_or_addr;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public actionDataTable action {
            get {
                return this.tableaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dl_records cln = ((dl_records)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dl_record"] != null)) {
                    base.Tables.Add(new dl_recordDataTable(ds.Tables["dl_record"]));
                }
                if ((ds.Tables["name_or_addr"] != null)) {
                    base.Tables.Add(new name_or_addrDataTable(ds.Tables["name_or_addr"]));
                }
                if ((ds.Tables["abstract"] != null)) {
                    base.Tables.Add(new abstractDataTable(ds.Tables["abstract"]));
                }
                if ((ds.Tables["comment"] != null)) {
                    base.Tables.Add(new commentDataTable(ds.Tables["comment"]));
                }
                if ((ds.Tables["req_name_or_addr"] != null)) {
                    base.Tables.Add(new req_name_or_addrDataTable(ds.Tables["req_name_or_addr"]));
                }
                if ((ds.Tables["action"] != null)) {
                    base.Tables.Add(new actionDataTable(ds.Tables["action"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledl_record = ((dl_recordDataTable)(base.Tables["dl_record"]));
            if ((initTable == true)) {
                if ((this.tabledl_record != null)) {
                    this.tabledl_record.InitVars();
                }
            }
            this.tablename_or_addr = ((name_or_addrDataTable)(base.Tables["name_or_addr"]));
            if ((initTable == true)) {
                if ((this.tablename_or_addr != null)) {
                    this.tablename_or_addr.InitVars();
                }
            }
            this.tableabstract = ((abstractDataTable)(base.Tables["abstract"]));
            if ((initTable == true)) {
                if ((this.tableabstract != null)) {
                    this.tableabstract.InitVars();
                }
            }
            this.tablecomment = ((commentDataTable)(base.Tables["comment"]));
            if ((initTable == true)) {
                if ((this.tablecomment != null)) {
                    this.tablecomment.InitVars();
                }
            }
            this.tablereq_name_or_addr = ((req_name_or_addrDataTable)(base.Tables["req_name_or_addr"]));
            if ((initTable == true)) {
                if ((this.tablereq_name_or_addr != null)) {
                    this.tablereq_name_or_addr.InitVars();
                }
            }
            this.tableaction = ((actionDataTable)(base.Tables["action"]));
            if ((initTable == true)) {
                if ((this.tableaction != null)) {
                    this.tableaction.InitVars();
                }
            }
            this.relationdl_record_name_or_addr = this.Relations["dl_record_name_or_addr"];
            this.relationdl_record_abstract = this.Relations["dl_record_abstract"];
            this.relationdl_record_comment = this.Relations["dl_record_comment"];
            this.relationdl_record_req_name_or_addr = this.Relations["dl_record_req_name_or_addr"];
            this.relationdl_record_action = this.Relations["dl_record_action"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dl_records";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledl_record = new dl_recordDataTable();
            base.Tables.Add(this.tabledl_record);
            this.tablename_or_addr = new name_or_addrDataTable();
            base.Tables.Add(this.tablename_or_addr);
            this.tableabstract = new abstractDataTable();
            base.Tables.Add(this.tableabstract);
            this.tablecomment = new commentDataTable();
            base.Tables.Add(this.tablecomment);
            this.tablereq_name_or_addr = new req_name_or_addrDataTable();
            base.Tables.Add(this.tablereq_name_or_addr);
            this.tableaction = new actionDataTable();
            base.Tables.Add(this.tableaction);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("dl_record_name_or_addr", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablename_or_addr.dl_record_IdColumn});
            this.tablename_or_addr.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dl_record_abstract", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableabstract.dl_record_IdColumn});
            this.tableabstract.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dl_record_comment", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomment.dl_record_IdColumn});
            this.tablecomment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dl_record_req_name_or_addr", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereq_name_or_addr.dl_record_IdColumn});
            this.tablereq_name_or_addr.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("dl_record_action", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaction.dl_record_IdColumn});
            this.tableaction.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationdl_record_name_or_addr = new global::System.Data.DataRelation("dl_record_name_or_addr", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablename_or_addr.dl_record_IdColumn}, false);
            this.relationdl_record_name_or_addr.Nested = true;
            this.Relations.Add(this.relationdl_record_name_or_addr);
            this.relationdl_record_abstract = new global::System.Data.DataRelation("dl_record_abstract", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableabstract.dl_record_IdColumn}, false);
            this.relationdl_record_abstract.Nested = true;
            this.Relations.Add(this.relationdl_record_abstract);
            this.relationdl_record_comment = new global::System.Data.DataRelation("dl_record_comment", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecomment.dl_record_IdColumn}, false);
            this.relationdl_record_comment.Nested = true;
            this.Relations.Add(this.relationdl_record_comment);
            this.relationdl_record_req_name_or_addr = new global::System.Data.DataRelation("dl_record_req_name_or_addr", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablereq_name_or_addr.dl_record_IdColumn}, false);
            this.relationdl_record_req_name_or_addr.Nested = true;
            this.Relations.Add(this.relationdl_record_req_name_or_addr);
            this.relationdl_record_action = new global::System.Data.DataRelation("dl_record_action", new global::System.Data.DataColumn[] {
                        this.tabledl_record.dl_record_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaction.dl_record_IdColumn}, false);
            this.relationdl_record_action.Nested = true;
            this.Relations.Add(this.relationdl_record_action);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedl_record() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializename_or_addr() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_abstract() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecomment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereq_name_or_addr() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dl_records ds = new dl_records();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dl_recordRowChangeEventHandler(object sender, dl_recordRowChangeEvent e);
        
        public delegate void name_or_addrRowChangeEventHandler(object sender, name_or_addrRowChangeEvent e);
        
        public delegate void abstractRowChangeEventHandler(object sender, abstractRowChangeEvent e);
        
        public delegate void commentRowChangeEventHandler(object sender, commentRowChangeEvent e);
        
        public delegate void req_name_or_addrRowChangeEventHandler(object sender, req_name_or_addrRowChangeEvent e);
        
        public delegate void actionRowChangeEventHandler(object sender, actionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dl_recordDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            private global::System.Data.DataColumn columndlnumber;
            
            private global::System.Data.DataColumn columnfo_bates;
            
            private global::System.Data.DataColumn columntype_app;
            
            private global::System.Data.DataColumn columnmisc_info;
            
            private global::System.Data.DataColumn columnreq_code;
            
            private global::System.Data.DataColumn columnrec_date;
            
            private global::System.Data.DataColumn columndmv_info_line;
            
            private global::System.Data.DataColumn columnbirthdate;
            
            private global::System.Data.DataColumn columnsex;
            
            private global::System.Data.DataColumn columnheight;
            
            private global::System.Data.DataColumn columnweight;
            
            private global::System.Data.DataColumn columneyes;
            
            private global::System.Data.DataColumn columnhair;
            
            private global::System.Data.DataColumn columnvol_req;
            
            private global::System.Data.DataColumn columnlic_class;
            
            private global::System.Data.DataColumn columnlic_class_name;
            
            private global::System.Data.DataColumn columnlic_issue;
            
            private global::System.Data.DataColumn columnlic_expire;
            
            private global::System.Data.DataColumn columnext;
            
            private global::System.Data.DataColumn columnrestrict;
            
            private global::System.Data.DataColumn columndup_lic_iss;
            
            private global::System.Data.DataColumn columnlic_held;
            
            private global::System.Data.DataColumn columnseq_no;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordDataTable() {
                this.TableName = "dl_record";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dl_recordDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dl_recordDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dlnumberColumn {
                get {
                    return this.columndlnumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fo_batesColumn {
                get {
                    return this.columnfo_bates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_appColumn {
                get {
                    return this.columntype_app;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn misc_infoColumn {
                get {
                    return this.columnmisc_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn req_codeColumn {
                get {
                    return this.columnreq_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rec_dateColumn {
                get {
                    return this.columnrec_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dmv_info_lineColumn {
                get {
                    return this.columndmv_info_line;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn birthdateColumn {
                get {
                    return this.columnbirthdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sexColumn {
                get {
                    return this.columnsex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn heightColumn {
                get {
                    return this.columnheight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn weightColumn {
                get {
                    return this.columnweight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn eyesColumn {
                get {
                    return this.columneyes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hairColumn {
                get {
                    return this.columnhair;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn vol_reqColumn {
                get {
                    return this.columnvol_req;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lic_classColumn {
                get {
                    return this.columnlic_class;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lic_class_nameColumn {
                get {
                    return this.columnlic_class_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lic_issueColumn {
                get {
                    return this.columnlic_issue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lic_expireColumn {
                get {
                    return this.columnlic_expire;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn extColumn {
                get {
                    return this.columnext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn restrictColumn {
                get {
                    return this.columnrestrict;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dup_lic_issColumn {
                get {
                    return this.columndup_lic_iss;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lic_heldColumn {
                get {
                    return this.columnlic_held;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn seq_noColumn {
                get {
                    return this.columnseq_no;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow this[int index] {
                get {
                    return ((dl_recordRow)(this.Rows[index]));
                }
            }
            
            public event dl_recordRowChangeEventHandler dl_recordRowChanging;
            
            public event dl_recordRowChangeEventHandler dl_recordRowChanged;
            
            public event dl_recordRowChangeEventHandler dl_recordRowDeleting;
            
            public event dl_recordRowChangeEventHandler dl_recordRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Adddl_recordRow(dl_recordRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow Adddl_recordRow(
                        string dlnumber, 
                        string fo_bates, 
                        string type_app, 
                        string misc_info, 
                        string req_code, 
                        string rec_date, 
                        string dmv_info_line, 
                        string birthdate, 
                        string sex, 
                        string height, 
                        string weight, 
                        string eyes, 
                        string hair, 
                        string vol_req, 
                        string lic_class, 
                        string lic_class_name, 
                        string lic_issue, 
                        string lic_expire, 
                        string ext, 
                        string restrict, 
                        string dup_lic_iss, 
                        string lic_held, 
                        string seq_no) {
                dl_recordRow rowdl_recordRow = ((dl_recordRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        dlnumber,
                        fo_bates,
                        type_app,
                        misc_info,
                        req_code,
                        rec_date,
                        dmv_info_line,
                        birthdate,
                        sex,
                        height,
                        weight,
                        eyes,
                        hair,
                        vol_req,
                        lic_class,
                        lic_class_name,
                        lic_issue,
                        lic_expire,
                        ext,
                        restrict,
                        dup_lic_iss,
                        lic_held,
                        seq_no};
                rowdl_recordRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdl_recordRow);
                return rowdl_recordRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dl_recordDataTable cln = ((dl_recordDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dl_recordDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndl_record_Id = base.Columns["dl_record_Id"];
                this.columndlnumber = base.Columns["dlnumber"];
                this.columnfo_bates = base.Columns["fo_bates"];
                this.columntype_app = base.Columns["type_app"];
                this.columnmisc_info = base.Columns["misc_info"];
                this.columnreq_code = base.Columns["req_code"];
                this.columnrec_date = base.Columns["rec_date"];
                this.columndmv_info_line = base.Columns["dmv_info_line"];
                this.columnbirthdate = base.Columns["birthdate"];
                this.columnsex = base.Columns["sex"];
                this.columnheight = base.Columns["height"];
                this.columnweight = base.Columns["weight"];
                this.columneyes = base.Columns["eyes"];
                this.columnhair = base.Columns["hair"];
                this.columnvol_req = base.Columns["vol_req"];
                this.columnlic_class = base.Columns["lic_class"];
                this.columnlic_class_name = base.Columns["lic_class_name"];
                this.columnlic_issue = base.Columns["lic_issue"];
                this.columnlic_expire = base.Columns["lic_expire"];
                this.columnext = base.Columns["ext"];
                this.columnrestrict = base.Columns["restrict"];
                this.columndup_lic_iss = base.Columns["dup_lic_iss"];
                this.columnlic_held = base.Columns["lic_held"];
                this.columnseq_no = base.Columns["seq_no"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndlnumber = new global::System.Data.DataColumn("dlnumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndlnumber);
                this.columnfo_bates = new global::System.Data.DataColumn("fo_bates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfo_bates);
                this.columntype_app = new global::System.Data.DataColumn("type_app", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_app);
                this.columnmisc_info = new global::System.Data.DataColumn("misc_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmisc_info);
                this.columnreq_code = new global::System.Data.DataColumn("req_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreq_code);
                this.columnrec_date = new global::System.Data.DataColumn("rec_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrec_date);
                this.columndmv_info_line = new global::System.Data.DataColumn("dmv_info_line", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndmv_info_line);
                this.columnbirthdate = new global::System.Data.DataColumn("birthdate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbirthdate);
                this.columnsex = new global::System.Data.DataColumn("sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsex);
                this.columnheight = new global::System.Data.DataColumn("height", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnheight);
                this.columnweight = new global::System.Data.DataColumn("weight", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnweight);
                this.columneyes = new global::System.Data.DataColumn("eyes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columneyes);
                this.columnhair = new global::System.Data.DataColumn("hair", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhair);
                this.columnvol_req = new global::System.Data.DataColumn("vol_req", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvol_req);
                this.columnlic_class = new global::System.Data.DataColumn("lic_class", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlic_class);
                this.columnlic_class_name = new global::System.Data.DataColumn("lic_class_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlic_class_name);
                this.columnlic_issue = new global::System.Data.DataColumn("lic_issue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlic_issue);
                this.columnlic_expire = new global::System.Data.DataColumn("lic_expire", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlic_expire);
                this.columnext = new global::System.Data.DataColumn("ext", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnext);
                this.columnrestrict = new global::System.Data.DataColumn("restrict", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrestrict);
                this.columndup_lic_iss = new global::System.Data.DataColumn("dup_lic_iss", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndup_lic_iss);
                this.columnlic_held = new global::System.Data.DataColumn("lic_held", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlic_held);
                this.columnseq_no = new global::System.Data.DataColumn("seq_no", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnseq_no);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndl_record_Id}, true));
                this.columndl_record_Id.AutoIncrement = true;
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Unique = true;
                this.columndl_record_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow Newdl_recordRow() {
                return ((dl_recordRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dl_recordRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dl_recordRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dl_recordRowChanged != null)) {
                    this.dl_recordRowChanged(this, new dl_recordRowChangeEvent(((dl_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dl_recordRowChanging != null)) {
                    this.dl_recordRowChanging(this, new dl_recordRowChangeEvent(((dl_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dl_recordRowDeleted != null)) {
                    this.dl_recordRowDeleted(this, new dl_recordRowChangeEvent(((dl_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dl_recordRowDeleting != null)) {
                    this.dl_recordRowDeleting(this, new dl_recordRowChangeEvent(((dl_recordRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removedl_recordRow(dl_recordRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dl_recordDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class name_or_addrDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname_or_addr_Text;
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrDataTable() {
                this.TableName = "name_or_addr";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal name_or_addrDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected name_or_addrDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn name_or_addr_TextColumn {
                get {
                    return this.columnname_or_addr_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRow this[int index] {
                get {
                    return ((name_or_addrRow)(this.Rows[index]));
                }
            }
            
            public event name_or_addrRowChangeEventHandler name_or_addrRowChanging;
            
            public event name_or_addrRowChangeEventHandler name_or_addrRowChanged;
            
            public event name_or_addrRowChangeEventHandler name_or_addrRowDeleting;
            
            public event name_or_addrRowChangeEventHandler name_or_addrRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addname_or_addrRow(name_or_addrRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRow Addname_or_addrRow(string name_or_addr_Text, dl_recordRow parentdl_recordRowBydl_record_name_or_addr) {
                name_or_addrRow rowname_or_addrRow = ((name_or_addrRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name_or_addr_Text,
                        null};
                if ((parentdl_recordRowBydl_record_name_or_addr != null)) {
                    columnValuesArray[1] = parentdl_recordRowBydl_record_name_or_addr[0];
                }
                rowname_or_addrRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowname_or_addrRow);
                return rowname_or_addrRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                name_or_addrDataTable cln = ((name_or_addrDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new name_or_addrDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname_or_addr_Text = base.Columns["name_or_addr_Text"];
                this.columndl_record_Id = base.Columns["dl_record_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname_or_addr_Text = new global::System.Data.DataColumn("name_or_addr_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnname_or_addr_Text);
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRow Newname_or_addrRow() {
                return ((name_or_addrRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new name_or_addrRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(name_or_addrRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.name_or_addrRowChanged != null)) {
                    this.name_or_addrRowChanged(this, new name_or_addrRowChangeEvent(((name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.name_or_addrRowChanging != null)) {
                    this.name_or_addrRowChanging(this, new name_or_addrRowChangeEvent(((name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.name_or_addrRowDeleted != null)) {
                    this.name_or_addrRowDeleted(this, new name_or_addrRowChangeEvent(((name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.name_or_addrRowDeleting != null)) {
                    this.name_or_addrRowDeleting(this, new name_or_addrRowChangeEvent(((name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removename_or_addrRow(name_or_addrRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "name_or_addrDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class abstractDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnabstract_Text;
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractDataTable() {
                this.TableName = "abstract";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal abstractDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected abstractDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn abstract_TextColumn {
                get {
                    return this.columnabstract_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRow this[int index] {
                get {
                    return ((abstractRow)(this.Rows[index]));
                }
            }
            
            public event abstractRowChangeEventHandler abstractRowChanging;
            
            public event abstractRowChangeEventHandler abstractRowChanged;
            
            public event abstractRowChangeEventHandler abstractRowDeleting;
            
            public event abstractRowChangeEventHandler abstractRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddabstractRow(abstractRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRow AddabstractRow(string abstract_Text, dl_recordRow parentdl_recordRowBydl_record_abstract) {
                abstractRow rowabstractRow = ((abstractRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        abstract_Text,
                        null};
                if ((parentdl_recordRowBydl_record_abstract != null)) {
                    columnValuesArray[1] = parentdl_recordRowBydl_record_abstract[0];
                }
                rowabstractRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowabstractRow);
                return rowabstractRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                abstractDataTable cln = ((abstractDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new abstractDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnabstract_Text = base.Columns["abstract_Text"];
                this.columndl_record_Id = base.Columns["dl_record_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnabstract_Text = new global::System.Data.DataColumn("abstract_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnabstract_Text);
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "abstractRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "abstractRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "abstractRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "abstractDataTable");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableabstract");
                this.ExtendedProperties.Add("Generator_UserTableName", "abstract");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRow NewabstractRow() {
                return ((abstractRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new abstractRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(abstractRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.abstractRowChanged != null)) {
                    this.abstractRowChanged(this, new abstractRowChangeEvent(((abstractRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.abstractRowChanging != null)) {
                    this.abstractRowChanging(this, new abstractRowChangeEvent(((abstractRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.abstractRowDeleted != null)) {
                    this.abstractRowDeleted(this, new abstractRowChangeEvent(((abstractRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.abstractRowDeleting != null)) {
                    this.abstractRowDeleting(this, new abstractRowChangeEvent(((abstractRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveabstractRow(abstractRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "abstractDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class commentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncomment_Text;
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentDataTable() {
                this.TableName = "comment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal commentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected commentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn comment_TextColumn {
                get {
                    return this.columncomment_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow this[int index] {
                get {
                    return ((commentRow)(this.Rows[index]));
                }
            }
            
            public event commentRowChangeEventHandler commentRowChanging;
            
            public event commentRowChangeEventHandler commentRowChanged;
            
            public event commentRowChangeEventHandler commentRowDeleting;
            
            public event commentRowChangeEventHandler commentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcommentRow(commentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow AddcommentRow(string comment_Text, dl_recordRow parentdl_recordRowBydl_record_comment) {
                commentRow rowcommentRow = ((commentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        comment_Text,
                        null};
                if ((parentdl_recordRowBydl_record_comment != null)) {
                    columnValuesArray[1] = parentdl_recordRowBydl_record_comment[0];
                }
                rowcommentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcommentRow);
                return rowcommentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                commentDataTable cln = ((commentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new commentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncomment_Text = base.Columns["comment_Text"];
                this.columndl_record_Id = base.Columns["dl_record_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncomment_Text = new global::System.Data.DataColumn("comment_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columncomment_Text);
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow NewcommentRow() {
                return ((commentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new commentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(commentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.commentRowChanged != null)) {
                    this.commentRowChanged(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.commentRowChanging != null)) {
                    this.commentRowChanging(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.commentRowDeleted != null)) {
                    this.commentRowDeleted(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.commentRowDeleting != null)) {
                    this.commentRowDeleting(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecommentRow(commentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "commentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class req_name_or_addrDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnreq_name_or_addr_Text;
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrDataTable() {
                this.TableName = "req_name_or_addr";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal req_name_or_addrDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected req_name_or_addrDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn req_name_or_addr_TextColumn {
                get {
                    return this.columnreq_name_or_addr_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRow this[int index] {
                get {
                    return ((req_name_or_addrRow)(this.Rows[index]));
                }
            }
            
            public event req_name_or_addrRowChangeEventHandler req_name_or_addrRowChanging;
            
            public event req_name_or_addrRowChangeEventHandler req_name_or_addrRowChanged;
            
            public event req_name_or_addrRowChangeEventHandler req_name_or_addrRowDeleting;
            
            public event req_name_or_addrRowChangeEventHandler req_name_or_addrRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addreq_name_or_addrRow(req_name_or_addrRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRow Addreq_name_or_addrRow(string req_name_or_addr_Text, dl_recordRow parentdl_recordRowBydl_record_req_name_or_addr) {
                req_name_or_addrRow rowreq_name_or_addrRow = ((req_name_or_addrRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        req_name_or_addr_Text,
                        null};
                if ((parentdl_recordRowBydl_record_req_name_or_addr != null)) {
                    columnValuesArray[1] = parentdl_recordRowBydl_record_req_name_or_addr[0];
                }
                rowreq_name_or_addrRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreq_name_or_addrRow);
                return rowreq_name_or_addrRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                req_name_or_addrDataTable cln = ((req_name_or_addrDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new req_name_or_addrDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreq_name_or_addr_Text = base.Columns["req_name_or_addr_Text"];
                this.columndl_record_Id = base.Columns["dl_record_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreq_name_or_addr_Text = new global::System.Data.DataColumn("req_name_or_addr_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnreq_name_or_addr_Text);
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRow Newreq_name_or_addrRow() {
                return ((req_name_or_addrRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new req_name_or_addrRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(req_name_or_addrRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.req_name_or_addrRowChanged != null)) {
                    this.req_name_or_addrRowChanged(this, new req_name_or_addrRowChangeEvent(((req_name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.req_name_or_addrRowChanging != null)) {
                    this.req_name_or_addrRowChanging(this, new req_name_or_addrRowChangeEvent(((req_name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.req_name_or_addrRowDeleted != null)) {
                    this.req_name_or_addrRowDeleted(this, new req_name_or_addrRowChangeEvent(((req_name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.req_name_or_addrRowDeleting != null)) {
                    this.req_name_or_addrRowDeleting(this, new req_name_or_addrRowChangeEvent(((req_name_or_addrRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removereq_name_or_addrRow(req_name_or_addrRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "req_name_or_addrDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class actionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnaction_Text;
            
            private global::System.Data.DataColumn columndl_record_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionDataTable() {
                this.TableName = "action";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected actionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn action_TextColumn {
                get {
                    return this.columnaction_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dl_record_IdColumn {
                get {
                    return this.columndl_record_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow this[int index] {
                get {
                    return ((actionRow)(this.Rows[index]));
                }
            }
            
            public event actionRowChangeEventHandler actionRowChanging;
            
            public event actionRowChangeEventHandler actionRowChanged;
            
            public event actionRowChangeEventHandler actionRowDeleting;
            
            public event actionRowChangeEventHandler actionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddactionRow(actionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow AddactionRow(string action_Text, dl_recordRow parentdl_recordRowBydl_record_action) {
                actionRow rowactionRow = ((actionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        action_Text,
                        null};
                if ((parentdl_recordRowBydl_record_action != null)) {
                    columnValuesArray[1] = parentdl_recordRowBydl_record_action[0];
                }
                rowactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowactionRow);
                return rowactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                actionDataTable cln = ((actionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new actionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaction_Text = base.Columns["action_Text"];
                this.columndl_record_Id = base.Columns["dl_record_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaction_Text = new global::System.Data.DataColumn("action_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnaction_Text);
                this.columndl_record_Id = new global::System.Data.DataColumn("dl_record_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columndl_record_Id);
                this.columndl_record_Id.AllowDBNull = false;
                this.columndl_record_Id.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow NewactionRow() {
                return ((actionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new actionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(actionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.actionRowChanged != null)) {
                    this.actionRowChanged(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.actionRowChanging != null)) {
                    this.actionRowChanging(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.actionRowDeleted != null)) {
                    this.actionRowDeleted(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.actionRowDeleting != null)) {
                    this.actionRowDeleting(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveactionRow(actionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dl_records ds = new dl_records();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "actionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dl_recordRow : global::System.Data.DataRow {
            
            private dl_recordDataTable tabledl_record;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dl_recordRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledl_record = ((dl_recordDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tabledl_record.dl_record_IdColumn]));
                }
                set {
                    this[this.tabledl_record.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dlnumber {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.dlnumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dlnumber\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.dlnumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string fo_bates {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.fo_batesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fo_bates\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.fo_batesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type_app {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.type_appColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type_app\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.type_appColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string misc_info {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.misc_infoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'misc_info\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.misc_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string req_code {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.req_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'req_code\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.req_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rec_date {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.rec_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rec_date\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.rec_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dmv_info_line {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.dmv_info_lineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dmv_info_line\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.dmv_info_lineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string birthdate {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.birthdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'birthdate\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.birthdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sex {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.sexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sex\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.sexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string height {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.heightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'height\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.heightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string weight {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.weightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'weight\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.weightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string eyes {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.eyesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'eyes\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.eyesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hair {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.hairColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hair\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.hairColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string vol_req {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.vol_reqColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'vol_req\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.vol_reqColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lic_class {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.lic_classColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lic_class\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.lic_classColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lic_class_name {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.lic_class_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lic_class_name\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.lic_class_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lic_issue {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.lic_issueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lic_issue\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.lic_issueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lic_expire {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.lic_expireColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lic_expire\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.lic_expireColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ext {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.extColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ext\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.extColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string restrict {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.restrictColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'restrict\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.restrictColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dup_lic_iss {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.dup_lic_issColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dup_lic_iss\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.dup_lic_issColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lic_held {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.lic_heldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lic_held\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.lic_heldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string seq_no {
                get {
                    try {
                        return ((string)(this[this.tabledl_record.seq_noColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'seq_no\' in table \'dl_record\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledl_record.seq_noColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdlnumberNull() {
                return this.IsNull(this.tabledl_record.dlnumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdlnumberNull() {
                this[this.tabledl_record.dlnumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfo_batesNull() {
                return this.IsNull(this.tabledl_record.fo_batesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfo_batesNull() {
                this[this.tabledl_record.fo_batesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istype_appNull() {
                return this.IsNull(this.tabledl_record.type_appColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settype_appNull() {
                this[this.tabledl_record.type_appColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismisc_infoNull() {
                return this.IsNull(this.tabledl_record.misc_infoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmisc_infoNull() {
                this[this.tabledl_record.misc_infoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreq_codeNull() {
                return this.IsNull(this.tabledl_record.req_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreq_codeNull() {
                this[this.tabledl_record.req_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrec_dateNull() {
                return this.IsNull(this.tabledl_record.rec_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrec_dateNull() {
                this[this.tabledl_record.rec_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdmv_info_lineNull() {
                return this.IsNull(this.tabledl_record.dmv_info_lineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdmv_info_lineNull() {
                this[this.tabledl_record.dmv_info_lineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbirthdateNull() {
                return this.IsNull(this.tabledl_record.birthdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbirthdateNull() {
                this[this.tabledl_record.birthdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssexNull() {
                return this.IsNull(this.tabledl_record.sexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsexNull() {
                this[this.tabledl_record.sexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsheightNull() {
                return this.IsNull(this.tabledl_record.heightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetheightNull() {
                this[this.tabledl_record.heightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsweightNull() {
                return this.IsNull(this.tabledl_record.weightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetweightNull() {
                this[this.tabledl_record.weightColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IseyesNull() {
                return this.IsNull(this.tabledl_record.eyesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeteyesNull() {
                this[this.tabledl_record.eyesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshairNull() {
                return this.IsNull(this.tabledl_record.hairColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethairNull() {
                this[this.tabledl_record.hairColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isvol_reqNull() {
                return this.IsNull(this.tabledl_record.vol_reqColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setvol_reqNull() {
                this[this.tabledl_record.vol_reqColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islic_classNull() {
                return this.IsNull(this.tabledl_record.lic_classColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlic_classNull() {
                this[this.tabledl_record.lic_classColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islic_class_nameNull() {
                return this.IsNull(this.tabledl_record.lic_class_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlic_class_nameNull() {
                this[this.tabledl_record.lic_class_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islic_issueNull() {
                return this.IsNull(this.tabledl_record.lic_issueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlic_issueNull() {
                this[this.tabledl_record.lic_issueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islic_expireNull() {
                return this.IsNull(this.tabledl_record.lic_expireColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlic_expireNull() {
                this[this.tabledl_record.lic_expireColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsextNull() {
                return this.IsNull(this.tabledl_record.extColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetextNull() {
                this[this.tabledl_record.extColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrestrictNull() {
                return this.IsNull(this.tabledl_record.restrictColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrestrictNull() {
                this[this.tabledl_record.restrictColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdup_lic_issNull() {
                return this.IsNull(this.tabledl_record.dup_lic_issColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdup_lic_issNull() {
                this[this.tabledl_record.dup_lic_issColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islic_heldNull() {
                return this.IsNull(this.tabledl_record.lic_heldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlic_heldNull() {
                this[this.tabledl_record.lic_heldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isseq_noNull() {
                return this.IsNull(this.tabledl_record.seq_noColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setseq_noNull() {
                this[this.tabledl_record.seq_noColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRow[] Getname_or_addrRows() {
                if ((this.Table.ChildRelations["dl_record_name_or_addr"] == null)) {
                    return new name_or_addrRow[0];
                }
                else {
                    return ((name_or_addrRow[])(base.GetChildRows(this.Table.ChildRelations["dl_record_name_or_addr"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRow[] GetabstractRows() {
                if ((this.Table.ChildRelations["dl_record_abstract"] == null)) {
                    return new abstractRow[0];
                }
                else {
                    return ((abstractRow[])(base.GetChildRows(this.Table.ChildRelations["dl_record_abstract"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow[] GetcommentRows() {
                if ((this.Table.ChildRelations["dl_record_comment"] == null)) {
                    return new commentRow[0];
                }
                else {
                    return ((commentRow[])(base.GetChildRows(this.Table.ChildRelations["dl_record_comment"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRow[] Getreq_name_or_addrRows() {
                if ((this.Table.ChildRelations["dl_record_req_name_or_addr"] == null)) {
                    return new req_name_or_addrRow[0];
                }
                else {
                    return ((req_name_or_addrRow[])(base.GetChildRows(this.Table.ChildRelations["dl_record_req_name_or_addr"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow[] GetactionRows() {
                if ((this.Table.ChildRelations["dl_record_action"] == null)) {
                    return new actionRow[0];
                }
                else {
                    return ((actionRow[])(base.GetChildRows(this.Table.ChildRelations["dl_record_action"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class name_or_addrRow : global::System.Data.DataRow {
            
            private name_or_addrDataTable tablename_or_addr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal name_or_addrRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablename_or_addr = ((name_or_addrDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name_or_addr_Text {
                get {
                    try {
                        return ((string)(this[this.tablename_or_addr.name_or_addr_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name_or_addr_Text\' in table \'name_or_addr\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablename_or_addr.name_or_addr_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tablename_or_addr.dl_record_IdColumn]));
                }
                set {
                    this[this.tablename_or_addr.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow dl_recordRow {
                get {
                    return ((dl_recordRow)(this.GetParentRow(this.Table.ParentRelations["dl_record_name_or_addr"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dl_record_name_or_addr"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isname_or_addr_TextNull() {
                return this.IsNull(this.tablename_or_addr.name_or_addr_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setname_or_addr_TextNull() {
                this[this.tablename_or_addr.name_or_addr_TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class abstractRow : global::System.Data.DataRow {
            
            private abstractDataTable tableabstract;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal abstractRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableabstract = ((abstractDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string abstract_Text {
                get {
                    try {
                        return ((string)(this[this.tableabstract.abstract_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'abstract_Text\' in table \'abstract\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableabstract.abstract_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tableabstract.dl_record_IdColumn]));
                }
                set {
                    this[this.tableabstract.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow dl_recordRow {
                get {
                    return ((dl_recordRow)(this.GetParentRow(this.Table.ParentRelations["dl_record_abstract"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dl_record_abstract"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isabstract_TextNull() {
                return this.IsNull(this.tableabstract.abstract_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setabstract_TextNull() {
                this[this.tableabstract.abstract_TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class commentRow : global::System.Data.DataRow {
            
            private commentDataTable tablecomment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal commentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecomment = ((commentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment_Text {
                get {
                    try {
                        return ((string)(this[this.tablecomment.comment_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment_Text\' in table \'comment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecomment.comment_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tablecomment.dl_record_IdColumn]));
                }
                set {
                    this[this.tablecomment.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow dl_recordRow {
                get {
                    return ((dl_recordRow)(this.GetParentRow(this.Table.ParentRelations["dl_record_comment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dl_record_comment"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscomment_TextNull() {
                return this.IsNull(this.tablecomment.comment_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcomment_TextNull() {
                this[this.tablecomment.comment_TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class req_name_or_addrRow : global::System.Data.DataRow {
            
            private req_name_or_addrDataTable tablereq_name_or_addr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal req_name_or_addrRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereq_name_or_addr = ((req_name_or_addrDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string req_name_or_addr_Text {
                get {
                    try {
                        return ((string)(this[this.tablereq_name_or_addr.req_name_or_addr_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'req_name_or_addr_Text\' in table \'req_name_or_addr\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablereq_name_or_addr.req_name_or_addr_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tablereq_name_or_addr.dl_record_IdColumn]));
                }
                set {
                    this[this.tablereq_name_or_addr.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow dl_recordRow {
                get {
                    return ((dl_recordRow)(this.GetParentRow(this.Table.ParentRelations["dl_record_req_name_or_addr"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dl_record_req_name_or_addr"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreq_name_or_addr_TextNull() {
                return this.IsNull(this.tablereq_name_or_addr.req_name_or_addr_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreq_name_or_addr_TextNull() {
                this[this.tablereq_name_or_addr.req_name_or_addr_TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class actionRow : global::System.Data.DataRow {
            
            private actionDataTable tableaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaction = ((actionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string action_Text {
                get {
                    try {
                        return ((string)(this[this.tableaction.action_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'action_Text\' in table \'action\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaction.action_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dl_record_Id {
                get {
                    return ((int)(this[this.tableaction.dl_record_IdColumn]));
                }
                set {
                    this[this.tableaction.dl_record_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow dl_recordRow {
                get {
                    return ((dl_recordRow)(this.GetParentRow(this.Table.ParentRelations["dl_record_action"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["dl_record_action"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaction_TextNull() {
                return this.IsNull(this.tableaction.action_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaction_TextNull() {
                this[this.tableaction.action_TextColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dl_recordRowChangeEvent : global::System.EventArgs {
            
            private dl_recordRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRowChangeEvent(dl_recordRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dl_recordRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class name_or_addrRowChangeEvent : global::System.EventArgs {
            
            private name_or_addrRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRowChangeEvent(name_or_addrRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public name_or_addrRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class abstractRowChangeEvent : global::System.EventArgs {
            
            private abstractRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRowChangeEvent(abstractRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public abstractRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class commentRowChangeEvent : global::System.EventArgs {
            
            private commentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRowChangeEvent(commentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class req_name_or_addrRowChangeEvent : global::System.EventArgs {
            
            private req_name_or_addrRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRowChangeEvent(req_name_or_addrRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public req_name_or_addrRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class actionRowChangeEvent : global::System.EventArgs {
            
            private actionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRowChangeEvent(actionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591