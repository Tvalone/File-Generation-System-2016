//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace File_Generation_System {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("processingRpt")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class processingRpt : global::System.Data.DataSet {
        
        private processingReport_DataTable tableprocessingReport_;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public processingRpt() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected processingRpt(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["processingReport "] != null)) {
                    base.Tables.Add(new processingReport_DataTable(ds.Tables["processingReport "]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public processingReport_DataTable processingReport_ {
            get {
                return this.tableprocessingReport_;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            processingRpt cln = ((processingRpt)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["processingReport "] != null)) {
                    base.Tables.Add(new processingReport_DataTable(ds.Tables["processingReport "]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableprocessingReport_ = ((processingReport_DataTable)(base.Tables["processingReport "]));
            if ((initTable == true)) {
                if ((this.tableprocessingReport_ != null)) {
                    this.tableprocessingReport_.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "processingRpt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/processingRpt.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableprocessingReport_ = new processingReport_DataTable();
            base.Tables.Add(this.tableprocessingReport_);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprocessingReport_() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            processingRpt ds = new processingRpt();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void processingReport_RowChangeEventHandler(object sender, processingReport_RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class processingReport_DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnrecord_status;
            
            private global::System.Data.DataColumn columncitation;
            
            private global::System.Data.DataColumn columnlicense_plate;
            
            private global::System.Data.DataColumn columnro_name;
            
            private global::System.Data.DataColumn columnmake;
            
            private global::System.Data.DataColumn columnviolation_date;
            
            private global::System.Data.DataColumn columnpenalty;
            
            private global::System.Data.DataColumn columnreject_code;
            
            private global::System.Data.DataColumn columnro_city_state;
            
            private global::System.Data.DataColumn columndate_removed;
            
            private global::System.Data.DataColumn columnremoval_code;
            
            private global::System.Data.DataColumn columnro_address;
            
            private global::System.Data.DataColumn columndate_paid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_DataTable() {
                this.TableName = "processingReport ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal processingReport_DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected processingReport_DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn record_statusColumn {
                get {
                    return this.columnrecord_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn citationColumn {
                get {
                    return this.columncitation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn license_plateColumn {
                get {
                    return this.columnlicense_plate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ro_nameColumn {
                get {
                    return this.columnro_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn makeColumn {
                get {
                    return this.columnmake;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn violation_dateColumn {
                get {
                    return this.columnviolation_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn penaltyColumn {
                get {
                    return this.columnpenalty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reject_codeColumn {
                get {
                    return this.columnreject_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ro_city_stateColumn {
                get {
                    return this.columnro_city_state;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_removedColumn {
                get {
                    return this.columndate_removed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn removal_codeColumn {
                get {
                    return this.columnremoval_code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ro_addressColumn {
                get {
                    return this.columnro_address;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_paidColumn {
                get {
                    return this.columndate_paid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_Row this[int index] {
                get {
                    return ((processingReport_Row)(this.Rows[index]));
                }
            }
            
            public event processingReport_RowChangeEventHandler processingReport_RowChanging;
            
            public event processingReport_RowChangeEventHandler processingReport_RowChanged;
            
            public event processingReport_RowChangeEventHandler processingReport_RowDeleting;
            
            public event processingReport_RowChangeEventHandler processingReport_RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprocessingReport_Row(processingReport_Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_Row AddprocessingReport_Row(string record_status, string citation, string license_plate, string ro_name, string make, string violation_date, decimal penalty, string reject_code, string ro_city_state, string date_removed, string removal_code, string ro_address, string date_paid) {
                processingReport_Row rowprocessingReport_Row = ((processingReport_Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        record_status,
                        citation,
                        license_plate,
                        ro_name,
                        make,
                        violation_date,
                        penalty,
                        reject_code,
                        ro_city_state,
                        date_removed,
                        removal_code,
                        ro_address,
                        date_paid};
                rowprocessingReport_Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowprocessingReport_Row);
                return rowprocessingReport_Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                processingReport_DataTable cln = ((processingReport_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new processingReport_DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrecord_status = base.Columns["record_status"];
                this.columncitation = base.Columns["citation"];
                this.columnlicense_plate = base.Columns["license_plate"];
                this.columnro_name = base.Columns["ro_name"];
                this.columnmake = base.Columns["make"];
                this.columnviolation_date = base.Columns["violation_date"];
                this.columnpenalty = base.Columns["penalty"];
                this.columnreject_code = base.Columns["reject_code"];
                this.columnro_city_state = base.Columns["ro_city_state"];
                this.columndate_removed = base.Columns["date_removed"];
                this.columnremoval_code = base.Columns["removal_code"];
                this.columnro_address = base.Columns["ro_address"];
                this.columndate_paid = base.Columns["date_paid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrecord_status = new global::System.Data.DataColumn("record_status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrecord_status);
                this.columncitation = new global::System.Data.DataColumn("citation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncitation);
                this.columnlicense_plate = new global::System.Data.DataColumn("license_plate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlicense_plate);
                this.columnro_name = new global::System.Data.DataColumn("ro_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnro_name);
                this.columnmake = new global::System.Data.DataColumn("make", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmake);
                this.columnviolation_date = new global::System.Data.DataColumn("violation_date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnviolation_date);
                this.columnpenalty = new global::System.Data.DataColumn("penalty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpenalty);
                this.columnreject_code = new global::System.Data.DataColumn("reject_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreject_code);
                this.columnro_city_state = new global::System.Data.DataColumn("ro_city_state", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnro_city_state);
                this.columndate_removed = new global::System.Data.DataColumn("date_removed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_removed);
                this.columnremoval_code = new global::System.Data.DataColumn("removal_code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoval_code);
                this.columnro_address = new global::System.Data.DataColumn("ro_address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnro_address);
                this.columndate_paid = new global::System.Data.DataColumn("date_paid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_paid);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_Row NewprocessingReport_Row() {
                return ((processingReport_Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new processingReport_Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(processingReport_Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.processingReport_RowChanged != null)) {
                    this.processingReport_RowChanged(this, new processingReport_RowChangeEvent(((processingReport_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.processingReport_RowChanging != null)) {
                    this.processingReport_RowChanging(this, new processingReport_RowChangeEvent(((processingReport_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.processingReport_RowDeleted != null)) {
                    this.processingReport_RowDeleted(this, new processingReport_RowChangeEvent(((processingReport_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.processingReport_RowDeleting != null)) {
                    this.processingReport_RowDeleting(this, new processingReport_RowChangeEvent(((processingReport_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprocessingReport_Row(processingReport_Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                processingRpt ds = new processingRpt();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "processingReport_DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class processingReport_Row : global::System.Data.DataRow {
            
            private processingReport_DataTable tableprocessingReport_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal processingReport_Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprocessingReport_ = ((processingReport_DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string record_status {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.record_statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'record_status\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.record_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string citation {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.citationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'citation\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.citationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string license_plate {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.license_plateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'license_plate\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.license_plateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ro_name {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.ro_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ro_name\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.ro_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string make {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.makeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'make\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.makeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string violation_date {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.violation_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'violation_date\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.violation_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal penalty {
                get {
                    try {
                        return ((decimal)(this[this.tableprocessingReport_.penaltyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'penalty\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.penaltyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reject_code {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.reject_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reject_code\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.reject_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ro_city_state {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.ro_city_stateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ro_city_state\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.ro_city_stateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_removed {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.date_removedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_removed\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.date_removedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string removal_code {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.removal_codeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'removal_code\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.removal_codeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ro_address {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.ro_addressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ro_address\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.ro_addressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_paid {
                get {
                    try {
                        return ((string)(this[this.tableprocessingReport_.date_paidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_paid\' in table \'processingReport \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprocessingReport_.date_paidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrecord_statusNull() {
                return this.IsNull(this.tableprocessingReport_.record_statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrecord_statusNull() {
                this[this.tableprocessingReport_.record_statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscitationNull() {
                return this.IsNull(this.tableprocessingReport_.citationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcitationNull() {
                this[this.tableprocessingReport_.citationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islicense_plateNull() {
                return this.IsNull(this.tableprocessingReport_.license_plateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlicense_plateNull() {
                this[this.tableprocessingReport_.license_plateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isro_nameNull() {
                return this.IsNull(this.tableprocessingReport_.ro_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setro_nameNull() {
                this[this.tableprocessingReport_.ro_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmakeNull() {
                return this.IsNull(this.tableprocessingReport_.makeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmakeNull() {
                this[this.tableprocessingReport_.makeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isviolation_dateNull() {
                return this.IsNull(this.tableprocessingReport_.violation_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setviolation_dateNull() {
                this[this.tableprocessingReport_.violation_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspenaltyNull() {
                return this.IsNull(this.tableprocessingReport_.penaltyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpenaltyNull() {
                this[this.tableprocessingReport_.penaltyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreject_codeNull() {
                return this.IsNull(this.tableprocessingReport_.reject_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreject_codeNull() {
                this[this.tableprocessingReport_.reject_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isro_city_stateNull() {
                return this.IsNull(this.tableprocessingReport_.ro_city_stateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setro_city_stateNull() {
                this[this.tableprocessingReport_.ro_city_stateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_removedNull() {
                return this.IsNull(this.tableprocessingReport_.date_removedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_removedNull() {
                this[this.tableprocessingReport_.date_removedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isremoval_codeNull() {
                return this.IsNull(this.tableprocessingReport_.removal_codeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setremoval_codeNull() {
                this[this.tableprocessingReport_.removal_codeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isro_addressNull() {
                return this.IsNull(this.tableprocessingReport_.ro_addressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setro_addressNull() {
                this[this.tableprocessingReport_.ro_addressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_paidNull() {
                return this.IsNull(this.tableprocessingReport_.date_paidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_paidNull() {
                this[this.tableprocessingReport_.date_paidColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class processingReport_RowChangeEvent : global::System.EventArgs {
            
            private processingReport_Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_RowChangeEvent(processingReport_Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public processingReport_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591